@model SajiloAccount.Models.InventoryTransactionModel
@using App.Enums
@using AccountBLL
@using App.DateConverter;
@{
    ViewBag.Title = "Purchase";
    int paymentCounter = 1;
}
<div class="main-title">
    <h3>Purchase</h3>
</div>
<div id="pop-up-div" class="modal fade" role="dialog">
</div>

@if (Model.IsEditCase)
{
    <div class="button-group-1 text-right">
        <button onclick="EditNaration()" class="btn btn-add btn-edit-remarks"><i class="fa fa-edit" aria-hidden="true"></i>Edit Remarks</button>
        @if (Model.IsEditCase)
        {

            if (Model.IsActive)
            {
                <button id="CancellButton" type="button" class="btn cancel-btn"><i class="fa fa-trash"></i> Cancel Transaction</button>
            }
            else
            {
                <div class="col-md-12">
                    @Html.Label("Cancelled Reason")
                    @Html.TextAreaFor(x => x.Remarks, new { @class = "form-control", disabled = "disabled" })
                </div>
                <div class="btn-groups text-right">
                    <button class="btn cancel-btn disabled">Transaction Cancelled</button>
                </div>
            }


        }

    </div>
}



<div id="popup" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="closeTop" data-dismiss="modal" aria-hidden="true">&times;</span>
                <h4 class="modal-title">Edit Remarks</h4>
            </div>
            @using (Html.BeginForm("EditNarration", "Inventory", FormMethod.Post, new { id = "remarks-form" }))
            {
                <div class="modal-body">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-grop_padding">
                                    @Html.LabelFor(x => x.Remarks)
                                    @Html.HiddenFor(x => x.InventoryTransactionID)
                                    @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", id = "remarks-area" })
                                    @Html.ValidationMessageFor(model => model.Remarks)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="btn-groups modal-footer">
                        <button type="submit" class="btn btn-primary btn-save"><i class="fa fa-save"></i> Save Changes</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<div class="box-border inventory-transaction clearfix" id="purchase-form-div">
    @using (Html.BeginForm("Purchases", "Inventory", FormMethod.Post, new { id = "purchase-form" }))
    {
        @Html.HiddenFor(model => model.IsEditCase)
        <div class="row party-row">

            @Html.HiddenFor(x => x.InventoryTransactionID)


            @if (Model.IsParty)
            {
                <div class="col-md-3 col-sm-3 item  ">
                    <label for="PartyId">
                        Party Name
                        @if (Model.IsEditCase == false)
                        {
                            <button type="button" class="instant-add-button" onclick="AddNewParty()"><i class=" fa fa-plus"></i></button>
                        }
                        (<span class="checkbox-sty-1 form-group d-inline">

                            <label for="IsParty">Is Party</label>
                            @if (Model.IsEditCase)
                            {
                                @Html.CheckBoxFor(x => x.IsParty, new { @class = "check", disabled = "disabled" })
                            }
                            else
                            {
                                @Html.CheckBoxFor(x => x.IsParty, new { @class = "check" })
                            }
                            @Html.ValidationMessageFor(model => model.IsParty)
                        </span>)
                    </label>
                    <div class="party-section">
                        @Html.DropDownListFor(x => x.PartyId, new SelectList(CommonService.GetPartiesByType(), "SelectId", "SelectText"), AppConstants.Select, new { @class = "form-control ", id = "new-party" })
                        @Html.ValidationMessageFor(x => x.PartyId)
                    </div>

                    <div class="non-party-section" style="display:none">
                        @Html.TextBoxFor(x => x.PartyName, new { @class = "form-control capitalize-first-letter" })
                        @Html.ValidationMessageFor(model => model.PartyName)
                    </div>

                </div>

            }
            else
            {
                <div class="item col-md-3 col-sm-3 party-section" style="display:none">
                    <label for="PartyId">
                        Party Name
                        @if (Model.IsEditCase == false)
                        {
                            <button type="button" class="instant-add-button" onclick="AddNewParty()"><i class=" fas fa-plus"></i></button>
                        }
                        (<span class="checkbox-sty-1 form-group d-inline">

                            <label for="IsParty">Is Party</label>
                            @if (Model.IsEditCase)
                            {
                                @Html.CheckBoxFor(x => x.IsParty, new { @class = "check", disabled = "disabled" })
                            }
                            else
                            {
                                @Html.CheckBoxFor(x => x.IsParty, new { @class = "check" })
                            }
                            @Html.ValidationMessageFor(model => model.IsParty)
                        </span>)
                    </label>
                    @Html.DropDownListFor(x => x.PartyId, new SelectList(CommonService.GetPartiesByType(), "SelectId", "SelectText"), AppConstants.Select, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.PartyId)
                </div>
                <div class="item col-md-3 col-sm-3 non-party-section">
                    <label for="PartyId">
                        Party Name
                        @if (Model.IsEditCase == false)
                        {
                            <button type="button" class="instant-add-button" onclick="AddNewParty()"><i class=" fas fa-plus"></i></button>
                        }
                        (<span class="checkbox-sty-1 form-group d-inline">

                            <label for="IsParty">Is Party</label>
                            @if (Model.IsEditCase)
                            {
                                @Html.CheckBoxFor(x => x.IsParty, new { @class = "check", disabled = "disabled" })
                            }
                            else
                            {
                                @Html.CheckBoxFor(x => x.IsParty, new { @class = "check" })
                            }
                            @Html.ValidationMessageFor(model => model.IsParty)
                        </span>)
                    </label>
                    @Html.TextBoxFor(x => x.PartyName, new { @class = "form-control capitalize-first-letter" })
                    @Html.ValidationMessageFor(model => model.PartyName)
                </div>
            }
            <div class="col-md-3 col-sm-3 item">
                @Html.LabelFor(x => x.TransactionTypeId)
                @Html.HiddenFor(x => x.TransactionTypeId)
                @Html.DropDownList("TransactionTypes", new SelectList(CommonService.GetConfigChoices(CommonConfigChoiceCategory.TransactionType), "SelectId", "SelectText", Model.TransactionTypeId), AppConstants.Select, new { @disabled = "disabled", @class = "form-control" })
                @Html.ValidationMessageFor(x => x.TransactionTypeId)
            </div>

            <div class="col-md-3 col-sm-3 item">
                @Html.LabelFor(x => x.BillNumber)
                @Html.TextBoxFor(x => x.BillNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.BillNumber)
            </div>

            <div class="col-md-3 col-sm-3 item">
                @Html.LabelFor(x => x.TransactionDateNepali)
                @Html.TextBoxFor(x => x.TransactionDateNepali, new { @class = "form-control nepali-calendar", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.TransactionDateNepali)
            </div>

        </div>
    

        <div class="border-btm2 form-group">
            @Html.LabelFor(x => x.Remarks)
            @Html.TextAreaFor(x => x.Remarks, new { @class = "form-control", id = "prev-remarks", placeholder = "Remarks" })
            @Html.ValidationMessageFor(x => x.Remarks)
        </div>

        <div class="add-purchase-item-section">
            @if (Model.IsEditCase == false)
            {
                <div class="add-items">
                    <span class="legend-add-items">Add Items</span>
                    <div class="row clearfix">
                        <div class="col-md-3 col-sm-3 alignment">
                            <label for="GoodsId" class="gap-right">
                                Items/Services
                                <a class="instant-add-button" onclick="AddNewItem()"><i class="fa fa-plus"></i></a>
                            </label>
                            @Html.DropDownListFor(x => x.GoodsId, new SelectList(CommonService.GetGoodsList(), "SelectId", "SelectText"), AppConstants.Select, new { @class = "form-control", id = "new-good" })
                        </div>

                        <div class="col-md-2 col-sm-2 alignment alignment-qty">
                            @Html.LabelFor(x => x.Quantity, new { @class = "gap-right" })
                            @Html.TextBoxFor(x => x.Quantity, new { @Value = (Model.Quantity > 0 ? Model.Quantity.ToString() : string.Empty), @class = "form-control", placeholder = "0" })
                        </div>

                        <div class="col-md-2 col-sm-2 text-left">
                            <a class="btn btn-save" id="add-item-to-list"><i class="fa fa-plus"></i> Add</a>
                        </div>
                    </div>
                </div>

            }
        </div>

        <div id="items-table-div" class="transaction-items content-table">
            <div class="transaction-items-heading table-sty-inventory" id="items-list">
                <div class="sec-sn item">
                    SN.
                </div>

                <div class="sec-item heading-alignment item">
                    Item
                </div>
                <div class="sec-rate heading-alignment item">
                    Rate
                </div>
                <div class="sec-Quantity heading-alignment item">
                    Quantity
                </div>
                <div class="sec-total heading-alignment item">
                    Sub Total
                </div>

                <div class="sec-total item" style="display: flex;">
                    Discount
                    @Html.TextBoxFor(x => x.DiscountForAll, new { id = "discount-all", @class = "form-control item", placeholder = "(%)", style = "width: 45px; height: 22px; padding: 2px; margin: 0 auto; margin-top: 12px;text-align: center;" })
                </div>

                <div class="sec-total item">
                    Discount (Amt.)
                </div>
                <div class="sec-total heading-alignment item">
                    Total
                </div>
                @if (!Model.IsEditCase)
                {
                    <div class="sec-action heading-alignment item">
                        Action
                    </div>
                }

            </div>
            @if (Model.TransactionDetails != null)
            {
                int counter = 1;
                if (Model.IsEditCase)
                {
                    ViewBag.EditCase = "EditCase";
                }
                foreach (var item in Model.TransactionDetails)
                {
                    ViewBag.Counter = counter;
                    @Html.Partial("_AddItemToDiscountListView", item)
                    counter++;
                }
            }


        </div>


        <div class="total-amounts">
            <div class="row">

                @*<div class="col-md-3 col-sm-3 make-payment item form-group pull-right total-label2">
                </div>*@
                <div class="col-md-7 col-sm-7 make-payment make-payment-div checkbox-sty-1 form-group" id="make-payment-div">
                    @if (Model.IsEditCase == false)
                    {
                        @Html.LabelFor(model => model.MakePayment, new { @class = "lbl-style" })
                        @Html.CheckBoxFor(model => model.MakePayment, new { @class = "check2" })
                        @Html.ValidationMessageFor(model => model.MakePayment)
                        @Html.LabelFor(x => x.IsVatBill, new { @class = "lbl-style-vat" })
                        @Html.CheckBoxFor(x => x.IsVatBill, new { @class = "check2" })
                        @Html.ValidationMessageFor(model => model.IsVatBill)
                    }
                    else
                    {
                        @Html.LabelFor(x => x.IsVatBill, new { @class = "lbl-style-vat" })
                        @Html.CheckBoxFor(x => x.IsVatBill, new { @class = "check2", disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.IsVatBill)
                    }
                </div>

                @if (!Model.IsVatBill)
                {

                    <div class="col-md-5 col-sm-5 row total show-grand-total non-vat-bill pull-right" style="padding: 11px">
                        <div class="total-label">
                            <div class="col-md-12 col-sm-12 item">
                                @Html.LabelFor(x => x.GrandTotal, new { @class = "grand-total" })
                            </div>
                        </div>
                        <div class="total-span">
                            <div class="item">
                                <span class="grand-total-value">
                                    @Html.DisplayFor(x => x.GrandTotal, new { Value = String.Format("{0:0.00}", Model.GrandTotal) })
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5 col-sm-5 row total show-grand-total vat-bill pull-right" style="display:none">
                        <div class="total-label">
                            <div class="col-md-12 col-sm-12 item">
                                <label class="grand-total">Total &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;:</label>
                            </div>
                            <div class="col-md-12 col-sm-12 item">
                                <label class="grand-total">VAT Amount &nbsp;:</label>
                            </div>
                            <div class="col-md-12 col-sm-12 item">
                                <label class="grand-total">Grand Total &nbsp;:</label>
                            </div>
                        </div>
                        <div class="total-span">
                            <div class="item">
                                <span class="grand-total-value border-btm3">
                                    @Html.DisplayFor(x => x.GrandTotal, new { Value = String.Format("{0:0.00}", Model.GrandTotal) })
                                </span>
                            </div>
                            <div class="item">
                                <span class="vat-amount-value border-btm3">
                                    @Html.DisplayFor(x => x.VATAmount, new { Value = String.Format("{0:0.00}", Model.VATAmount) })
                                </span>
                            </div>
                            <div class="item">
                                <span class="grand-vat-value border-btm3">
                                    @Html.DisplayFor(x => x.GrandTotalWithVAT, new { Value = String.Format("{0:0.00}", Model.GrandTotalWithVAT) })
                                </span>
                            </div>
                        </div>

                    </div>
                }
                else
                {
                    <div class="col-md-5 col-sm-5 row total show-grand-total non-vat-bill pull-right" style="display:none">
                        <div class="total-label">
                            <div class="col-md-12 col-sm-12 item">
                                @Html.LabelFor(x => x.GrandTotal)
                            </div>
                        </div>
                        <div class="total-span">
                            <div class="item">
                                <span class="grand-total-value">
                                    @Html.DisplayFor(x => x.GrandTotal, new { Value = String.Format("{0:0.00}", Model.GrandTotal) })
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5 col-sm-5 total show-grand-total vat-bill pull-right row">
                        <div class="total-label col-md-8">
                            <div class="item">
                                <label class="grand-total">Total &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;:</label>
                            </div>
                            <div class="item">
                                <label class="grand-total">VAT Amount &nbsp;:</label>
                            </div>
                            <div class="item">
                                <label class="grand-total">Grand Total &nbsp;:</label>
                            </div>
                        </div>
                        <div class="total-span col-md-5">
                            <div class="item">
                                <span class="grand-total-value border-btm3">
                                    @Html.DisplayFor(x => x.GrandTotal, new { Value = String.Format("{0:0.00}", Model.GrandTotal) })
                                </span>
                            </div>
                            <div class="item">
                                <span class="vat-amount-value border-btm3">
                                    @Html.DisplayFor(x => x.VATAmount, new { Value = String.Format("{0:0.00}", Model.VATAmount) })
                                </span>
                            </div>
                            <div class="item">
                                <span class="grand-vat-value border-btm3">
                                    @Html.DisplayFor(x => x.GrandTotalWithVAT, new { Value = String.Format("{0:0.00}", Model.GrandTotalWithVAT) })
                                </span>
                            </div>
                        </div>

                    </div>
                }



            </div>
        </div>





        if (Model.IsEditCase)
        {


            <div class="payment-sec box-sty-4" id="payment-div">
                <div class="payment-wrapper">
                    <span class="legend-add-items">Payment</span>
                    <div class="text-right">
                        @if (Model.IsParty)
                        {
                            <a class="btn btn-add short-cut-cr" href='@Url.Content("~/Inventory/PurchasePayment?partyId="+Model.PartyId+"&transactionId="+Model.InventoryTransactionID)'><i class="fa fa-plus"></i> Add Payment</a>

                        }
                        else
                        {
                            <a class="btn btn-add short-cut-cr" href='@Url.Content("~/Inventory/PurchasePayment?transactionId="+Model.InventoryTransactionID)'><i class="fa fa-plus"></i> Add Payment</a>
                        }
                    </div>
                </div>


                <div class="transaction-items transaction-payment content-table">
                    <div class="transaction-items-heading table-sty-inventory" id="items-list">
                        <div class="sec-sn item">
                            SN.
                        </div>

                        <div class="sec-Quantity heading-alignment item">
                            Transaction Date
                        </div>
                        <div class="sec-rate heading-alignment item">
                            Account Head
                        </div>
                        <div class="sec-Quantity heading-alignment item">
                            Voucher Number
                        </div>
                        <div class="sec-total heading-alignment item">
                            Amount
                        </div>
                        <div class="sec-action heading-alignment item">
                            Action
                        </div>
                    </div>
                    @foreach (var item in Model.TransactionPayments)
                    {
                        <div class="indivisual-row table-body">
                            <div class="sec-sn item">
                                @paymentCounter
                            </div>

                            <div class="sec-Quantity item">
                                @DateConverter.GetNepaliDate(item.PaymentDate)
                            </div>
                            <div class="sec-rate item">
                                @item.AccountHeadName
                            </div>
                            <div class="sec-Quantity item">
                                @item.ReceiptNumber
                            </div>
                            <div class="sec-total item">
                                @item.PaymentAmount
                            </div>
                            @if (item.IsActive)
                            {
                                <div class="sec-action item">
                                    <a href='@Url.Content("~/Inventory/PurchasePayment?voucherNumber=" + item.ReceiptNumber)'>Cancel Payment</a>
                                </div>
                            }
                            else
                            {
                                <div class="sec-action item">
                                    Cancelled
                                </div>
                            }
                        </div>
                            paymentCounter++;
                    }
                    <div class="indivisual-row table-body">
                        <div class="sec-sn item">

                        </div>

                        <div class="sec-Quantity item">

                        </div>
                        <div class="sec-rate item">

                        </div>
                        <div class="sec-Quantity item">
                            <b>Total</b>
                        </div>
                        <div class="sec-total item">
                            <b> @CommonService.GetCurrencyFormat(Model.TransactionPayments.Sum(x => x.PaymentAmount))</b>
                        </div>

                        <div class="sec-action item">

                        </div>

                    </div>
                </div>

            </div>


        }

        if (!Model.IsEditCase)
        {
            <div class="div-btn-save text-right">
                <button type="submit" class="btn btn-save short-cut-save" id="submitbutton"><i class="fa fa-save"></i> Save (Ctrl+S)</button>
            </div>
        }

    }
</div>

<script>

    @*$('#add-payment-method').on('click', function () {
        var itemCounter = $('#voucher-payment-items').find('.indivisual-row').length;
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Inventory/GetNextPurchasePaymentItem")',
            data: { itemCounter: itemCounter },
            success: function (result) {
                $('#voucher-payment-items').append(result);
                PartyNonPartyLogic();
            },
            error: function () {
            }
        });
    });*@

    $(function () {

        if ('@Model.IsEditCase' == 'True') {
            $("#purchase-form-div input").prop("disabled", true);
            $("#purchase-form-div select").prop("disabled", true);
            $('#prev-remarks').prop('disabled', true);

        }

        if ('@Model.IsVatBill' == 'True') {
            $('#make-payment-div').css({/* 'margin-bottom': '0px'*/ })
        };

        PartyNonPartyLogic();
        $('#new-party').select2();
        $('#new-good').select2();
        $('#purchase-form').ajaxForm({
            beforeSubmit: function () {
                $('#purchase-form').removeData("validator").removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse($('#purchase-form'));
                if ($("#purchase-form").valid()) {
                    if ($('#items-table-div .indivisual-row').length == 0) {
                        ShowMessage("error", "error", 'Add atleast one item in the purchase list !!');
                        return false;
                    }

                    //var chk = $('#IsParty').prop('checked');
                    CalculateGrandTotal();

             

                    WorkForce.loader.show();
                } else {
                    return false;
                }
            },
            success: function (result) {
                if (result.Success) {

                    var fromDate = $('#TransactionDateNepali').val();
                    var toDate = $('#TransactionDateNepali').val();
                    var transactionType = $('#TransactionTypeId').val();
                    var partyId = $('#new-party').val();
                    var makePayment = $('#MakePayment').prop('checked');
                    if (makePayment == true) {
                        var chk = $('#IsParty').prop('checked');
                        if (chk) {
                            location.href = '@Url.Content("~/Inventory/PurchasePayment?partyId=")' + partyId + "&transactionId=" + result.ReturnId;
                        }
                        else {
                            location.href = '@Url.Content("~/Inventory/PurchasePayment?transactionId=")' + result.ReturnId;
                        }


                    }
                    else {
                        location.href = '@Url.Content("~/Inventory/Index?FromDateNepali=")' + fromDate + "&ToDateNepali=" + toDate + "&TransactionTypeId=" + transactionType;

                    }
                }
                else {
                    WorkForce.loader.hide();
                    ShowMessage("error", "error", result.Msg);
                }
            },
            error: function (result) {
                WorkForce.loader.hide();
                ShowMessage("error", "error", "error in Saving data!!");
                var responseText = JSON.parse(result.responseText);
                if (responseText.IsSessionOut) {
                    location.href = responseText.Redirect;
                }
            }
        });

        //edit remarks
        $('#remarks-form').ajaxForm({
            beforeSubmit: function () {
                $('#remarks-form').removeData("validator").removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse($('#remarks-form'));
                if ($("#remarks-form").valid()) {
                    WorkForce.loader.show();
                } else {
                    return false;
                }
            },
            success: function (result) {
                if (result.Success) {
                    WorkForce.loader.hide();
                    ShowMessage("success", "success", result.Msg);
                    $('#pop-up-div').modal('hide');
                    location.href = '@Url.Content("~/Inventory/Purchases?transactionId=" + Model.InventoryTransactionID)';
                } else {
                    WorkForce.loader.hide();
                    ShowMessage("error", "error", result.Msg);
                }
            },
            error: function () {
                WorkForce.loader.hide();
                ShowMessage("error", "error", "error in calling ajax!!");
            }
        });
    });

    $('#Quantity').on('keyup', function (k) {
        var code = k.which;
        if (code == 13) {
            $('#add-item-to-list').click();
        }
    });
    function DeleteRow(e) {
        var confirmValue = confirm("Are you sure to delete this Item ?");
        if (confirmValue) {
            $(e).closest('div.indivisual-row').remove();
            CalculateGrandTotal();
        }
    }
    $('#add-item-to-list').on('click', function () {
        var goodsId = $('#new-good option:selected').val();
        if (goodsId == null || goodsId == '') {
            ShowMessage("warning", "warning", 'Please select item first !!!');
            return false;
        }
        var goodsInList = $('#items-table-div .indivisual-row').find('input.Goods-Id');
        var duplicate = false;
        $.each(goodsInList, function (eachitemindex, eachItem) {
            var individualGoodId = $(eachItem).val();
            if (goodsId == individualGoodId) {
                duplicate = true;
            }
        });
        if (duplicate) {
            ShowMessage("warning", "warning", 'Selected Item is already Listed !!!');
            return false;
        }
        var counter = $('#items-table-div').find('.indivisual-row').length;
        counter++;
        var data = {
            GoodsId: $('#new-good option:selected').val(),
            counter: counter,
            Quantity: $('#Quantity').val(),
            TransactionType: '@CommonInventoryTransactions.Purchase.ToString()'
        }
        WorkForce.loader.show();
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Inventory/AddItemToPurchaseListView")',
            data: data,
            success: function (result) {
                if (!result.hasOwnProperty('Success')) {
                    $('#items-table-div').append(result);
                    $('#new-good').val('');
                    $('#Quantity').val('');
                    CalculateGrandTotal();
                    WorkForce.loader.hide();
                }
                else {
                    WorkForce.loader.hide();
                    ShowMessage("error", "error", result.Msg);
                }
            },
            error: function (ex) {
                WorkForce.loader.hide();
                console.log(ex);
            }
        });
    });

    function CalculateGrandTotal(e) {
        if (e != null) {
            var quantity = $(e.target).closest('.indivisual-row').find('.good-quantity').val();
            var rate = $(e.target).closest('.indivisual-row').find('.good-rate').val();
            $(e.target).closest('.indivisual-row').find('.sub-total').val(Math.abs(quantity * rate));

            var subtotal = $(e.target).closest('.indivisual-row').find('.sub-total').val();
            var discountPercenatage = $(e.target).closest('.indivisual-row').find('.discount-percentage').val();
            if (discountPercenatage != '') {
                $(e.target).closest('.indivisual-row').find('.discount-amt').val(Math.round(((discountPercenatage / 100) * subtotal) * 100) / 100);
                var discountAmt = $(e.target).closest('.indivisual-row').find('.discount-amt').val();
                $(e.target).closest('.indivisual-row').find('.good-total').val(Math.abs(subtotal - discountAmt));
            }
            else {
                $(e.target).closest('.indivisual-row').find('.discount-amt').val('');
                $(e.target).closest('.indivisual-row').find('.good-total').val(subtotal);
            }
        }

        var grandTotal = 0;
        $('.good-total').each(function () {
            grandTotal += Number($(this).val());
        });
        var vatAmount = grandTotal * 0.13;
        var grandVatTotal = grandTotal + vatAmount;
        $('.grand-total-value').html(grandTotal.toFixed(2));
        $('.vat-amount-value').html(vatAmount.toFixed(2));
        $('.grand-vat-value').html(grandVatTotal.toFixed(2));
    }


    $(document).on('change', '.discount-percentage', function (e) {
        var discountPercenatage = $(e.target).closest('.indivisual-row').find('.discount-percentage').val();
        var subTotal = $(e.target).closest('.indivisual-row').find('.sub-total').val();
        if (discountPercenatage != '') {
            $(e.target).closest('.indivisual-row').find('.discount-amt').val(Math.round(((discountPercenatage / 100) * subTotal) * 100) / 100);
            var discountAmt = $(e.target).closest('.indivisual-row').find('.discount-amt').val();
            $(e.target).closest('.indivisual-row').find('.good-total').val(Math.abs(subTotal - discountAmt));
        }
        else {
            $(e.target).closest('.indivisual-row').find('.discount-amt').val('');
            $(e.target).closest('.indivisual-row').find('.good-total').val(subTotal);
        }
        CalculateGrandTotal();

    });

    $(document).on('change', '#discount-all', function () {
        var discountAll = $('#discount-all').val();
        $('.discount-percentage').each(function () {
            $(this).val(discountAll);
            $(this).trigger('change');
        });
    });

    $(document).on('change', '.good-rate', function (e) {
        CalculateGrandTotal(e);
    });
    $(document).on('change', '.good-quantity', function (e) {
        CalculateGrandTotal(e);
    });

    $(document).on('change', '.discount-amt', function (e) {
        var subTotal = $(e.target).closest('.indivisual-row').find('.sub-total').val();
        var discountAmt = $(e.target).closest('.indivisual-row').find('.discount-amt').val();
        $(e.target).closest('.indivisual-row').find('.good-total').val(Math.abs(subTotal - discountAmt));
        $(e.target).closest('.indivisual-row').find('.discount-percentage').val('');

        var grandTotal = 0;
        $('.good-total').each(function () {
            grandTotal += Number($(this).val());
        });

        $('.grand-total-value').html(grandTotal);
    });

    $('#IsParty').on('change', function () {
        PartyNonPartyLogic();
    })
    function PartyNonPartyLogic() {
        var chk = $('#IsParty').prop('checked');
        if (chk) {
            $('.party-section').css('display', 'block');
            $('.non-party-section').css('display', 'none');
            $('#new-party').prop('disabled', '');
            $('#PartyName').prop('disabled', 'disabled');
            //$('#payment-div').css('display', 'none');
            //$('#make-payment-div').css('display', 'block');
            //$('.account-head-change option:contains("Bills Payable")').removeAttr('disabled');
        }
        else {
            $('.party-section').css('display', 'none');
            $('.non-party-section').css('display', 'block');
            $('#new-party').prop('disabled', 'disabled');
            $('#PartyName').prop('disabled', '');
            //$('#payment-div').css('display', 'block');
            //$('#make-payment-div').css('display', 'none');
            //$('.account-head-change option:contains("Bills Payable")').attr('disabled', 'disabled');
        }
    }
    function GetCurrentBalance(e) {
        var accountId = $(e).val();
        var nepaliDate = $('#TransactionDateNepali').val();
        if (nepaliDate == "") {
            ShowMessage("warning", "Warning", "Please Enter Transaction Date");
            return false;
        }
        if (accountId != '') {
            WorkForce.loader.show();
            $.ajax({
                type: 'GET',
                url: '@Url.Content("~/Bank/GetCurrentBalance")',
                data: { accountId: accountId, nepaliDate: nepaliDate },
                success: function (result) {
                    $(e).parents('div.indivisual-row').find('input.current-balance').val(result.Msg);
                    WorkForce.loader.hide();
                },
                error: function () {
                    WorkForce.loader.hide();
                }
            });
        }
    }

    $("#CancellButton").click(function () {
        var transactionId =@Model.InventoryTransactionID
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Inventory/CancelTransaction")',
            data: { transactionId: transactionId },
            success: function (result) {
                $('#pop-up-div').html(result).modal({
                    'show': true,
                    'backdrop': 'static'
                })
            },
            error: function () {
            }
        });
    });


    $('#IsVatBill').on('change', function () {
        if ($('#IsVatBill').prop('checked')) {
            $('div.non-vat-bill').css('display', 'none');
            $('div.vat-bill').css('display', 'flex');
            $('#make-payment-div').css({/* 'margin-bottom': '25px'*/ });
        }
        else {
            $('div.non-vat-bill').css('display', 'flex');

            $('#make-payment-div').css({ /*'margin-bottom': '0'*/ });
            $('div.vat-bill').css('display', 'none');
        }
    })

    function EditNaration() {
        var remarks = $('#prev-remarks').val();
        $('#remarks-area').val(remarks);
        $('#popup').modal({
            'show': true,
            'backdrop': 'static'
        })
    }


    function AddNewParty() {
        $.ajax({
            type: 'GET',
            data: { isImmediate: true },
            url: '@Url.Content("~/Inventory/CreateEditParty")',
            success: function (result) {
                $('#pop-up-div').html(result).modal({
                    'show': true,
                    'backdrop': 'static',
                    'draggable': true
                })
            },
            error: function () {
            }
        });
    }

    function AddNewItem() {
        $.ajax({
            type: 'GET',
            data: { isImmediate: true },
            url: '@Url.Content("~/Inventory/CreateEditGoods")',
            success: function (result) {
                $('#pop-up-div').html(result).modal({
                    'show': true,
                    'backdrop': 'static',
                    'draggable': true
                })
            },
            error: function () {
            }
        });
    }

    function ReloadParty(partyType, partyId, partyName) {
        if (partyType == '@CommonPartyType.Vendor') {

            $('#new-party').append($('<option>', {
                value: partyId,
                text: partyName
            })).change();
            $('#new-party').val(partyId);
        }
    }

    function ReloadGood(goodsId, goodsName) {
        $('#new-good').append($('<option>', {
            value: goodsId,
            text: goodsName
        })).change();
        $('#new-good').val(goodsId);
    }
</script>
